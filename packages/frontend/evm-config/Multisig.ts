/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MultisigInterface extends utils.Interface {
  functions: {
    "addInternalTransaction(address[],uint256)": FunctionFragment;
    "addTransaction(address,uint256,bytes)": FunctionFragment;
    "approveInternalTransaction(uint256)": FunctionFragment;
    "approveTransaction(uint256)": FunctionFragment;
    "deposit()": FunctionFragment;
    "executeInternalTransaction(uint256)": FunctionFragment;
    "executeTransaction(uint256)": FunctionFragment;
    "getOwners()": FunctionFragment;
    "getTransaction(uint256)": FunctionFragment;
    "getTransactionCount()": FunctionFragment;
    "internalTransactions(uint256)": FunctionFragment;
    "isApprovedByOwner(uint256,address)": FunctionFragment;
    "isInternalApprovedByOwner(uint256,address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "owners(uint256)": FunctionFragment;
    "revokeApproval(uint256)": FunctionFragment;
    "revokeInternalApproval(uint256)": FunctionFragment;
    "testCall()": FunctionFragment;
    "threshold()": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addInternalTransaction"
      | "addTransaction"
      | "approveInternalTransaction"
      | "approveTransaction"
      | "deposit"
      | "executeInternalTransaction"
      | "executeTransaction"
      | "getOwners"
      | "getTransaction"
      | "getTransactionCount"
      | "internalTransactions"
      | "isApprovedByOwner"
      | "isInternalApprovedByOwner"
      | "isOwner"
      | "owners"
      | "revokeApproval"
      | "revokeInternalApproval"
      | "testCall"
      | "threshold"
      | "transactions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addInternalTransaction",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveInternalTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeInternalTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "internalTransactions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedByOwner",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInternalApprovedByOwner",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeApproval",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeInternalApproval",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "testCall", values?: undefined): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addInternalTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveInternalTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeInternalTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internalTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInternalApprovedByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeInternalApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;

  events: {
    "ApproveTransaction(address,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "ExecuteTransaction(address,uint256)": EventFragment;
    "NewInternalTransaction(address,uint256,address[],uint256)": EventFragment;
    "NewTransaction(address,uint256,address,uint256,bytes)": EventFragment;
    "UnApproveTransaction(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewInternalTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnApproveTransaction"): EventFragment;
}

export interface ApproveTransactionEventObject {
  owner: string;
  txIndex: BigNumber;
}
export type ApproveTransactionEvent = TypedEvent<
  [string, BigNumber],
  ApproveTransactionEventObject
>;

export type ApproveTransactionEventFilter =
  TypedEventFilter<ApproveTransactionEvent>;

export interface DepositEventObject {
  sender: string;
  value: BigNumber;
  balance: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface ExecuteTransactionEventObject {
  owner: string;
  txIndex: BigNumber;
}
export type ExecuteTransactionEvent = TypedEvent<
  [string, BigNumber],
  ExecuteTransactionEventObject
>;

export type ExecuteTransactionEventFilter =
  TypedEventFilter<ExecuteTransactionEvent>;

export interface NewInternalTransactionEventObject {
  owner: string;
  txIndex: BigNumber;
  owners: string[];
  threshold: BigNumber;
}
export type NewInternalTransactionEvent = TypedEvent<
  [string, BigNumber, string[], BigNumber],
  NewInternalTransactionEventObject
>;

export type NewInternalTransactionEventFilter =
  TypedEventFilter<NewInternalTransactionEvent>;

export interface NewTransactionEventObject {
  owner: string;
  txIndex: BigNumber;
  to: string;
  value: BigNumber;
  data: string;
}
export type NewTransactionEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  NewTransactionEventObject
>;

export type NewTransactionEventFilter = TypedEventFilter<NewTransactionEvent>;

export interface UnApproveTransactionEventObject {
  owner: string;
  txIndex: BigNumber;
}
export type UnApproveTransactionEvent = TypedEvent<
  [string, BigNumber],
  UnApproveTransactionEventObject
>;

export type UnApproveTransactionEventFilter =
  TypedEventFilter<UnApproveTransactionEvent>;

export interface Multisig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultisigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addInternalTransaction(
      _owners: PromiseOrValue<string>[],
      _threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTransaction(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveInternalTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeInternalTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOwners(overrides?: CallOverrides): Promise<[string[]]>;

    getTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, BigNumber] & {
        to: string;
        value: BigNumber;
        data: string;
        didExecute: boolean;
        confirmationsCount: BigNumber;
      }
    >;

    getTransactionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    internalTransactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        threshold: BigNumber;
        didExecute: boolean;
        confirmationsCount: BigNumber;
      }
    >;

    isApprovedByOwner(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInternalApprovedByOwner(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    revokeApproval(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeInternalApproval(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testCall(overrides?: CallOverrides): Promise<[string]>;

    threshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, BigNumber] & {
        to: string;
        value: BigNumber;
        data: string;
        didExecute: boolean;
        confirmationsCount: BigNumber;
      }
    >;
  };

  addInternalTransaction(
    _owners: PromiseOrValue<string>[],
    _threshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTransaction(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveInternalTransaction(
    _txIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveTransaction(
    _txIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeInternalTransaction(
    _txIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTransaction(
    _txIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOwners(overrides?: CallOverrides): Promise<string[]>;

  getTransaction(
    _txIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean, BigNumber] & {
      to: string;
      value: BigNumber;
      data: string;
      didExecute: boolean;
      confirmationsCount: BigNumber;
    }
  >;

  getTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  internalTransactions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      threshold: BigNumber;
      didExecute: boolean;
      confirmationsCount: BigNumber;
    }
  >;

  isApprovedByOwner(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInternalApprovedByOwner(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  revokeApproval(
    _txIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeInternalApproval(
    _txIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testCall(overrides?: CallOverrides): Promise<string>;

  threshold(overrides?: CallOverrides): Promise<BigNumber>;

  transactions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean, BigNumber] & {
      to: string;
      value: BigNumber;
      data: string;
      didExecute: boolean;
      confirmationsCount: BigNumber;
    }
  >;

  callStatic: {
    addInternalTransaction(
      _owners: PromiseOrValue<string>[],
      _threshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTransaction(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveInternalTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<void>;

    executeInternalTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwners(overrides?: CallOverrides): Promise<string[]>;

    getTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, BigNumber] & {
        to: string;
        value: BigNumber;
        data: string;
        didExecute: boolean;
        confirmationsCount: BigNumber;
      }
    >;

    getTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    internalTransactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        threshold: BigNumber;
        didExecute: boolean;
        confirmationsCount: BigNumber;
      }
    >;

    isApprovedByOwner(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInternalApprovedByOwner(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    revokeApproval(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeInternalApproval(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    testCall(overrides?: CallOverrides): Promise<string>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, BigNumber] & {
        to: string;
        value: BigNumber;
        data: string;
        didExecute: boolean;
        confirmationsCount: BigNumber;
      }
    >;
  };

  filters: {
    "ApproveTransaction(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      txIndex?: PromiseOrValue<BigNumberish> | null
    ): ApproveTransactionEventFilter;
    ApproveTransaction(
      owner?: PromiseOrValue<string> | null,
      txIndex?: PromiseOrValue<BigNumberish> | null
    ): ApproveTransactionEventFilter;

    "Deposit(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      value?: null,
      balance?: null
    ): DepositEventFilter;
    Deposit(
      sender?: PromiseOrValue<string> | null,
      value?: null,
      balance?: null
    ): DepositEventFilter;

    "ExecuteTransaction(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      txIndex?: PromiseOrValue<BigNumberish> | null
    ): ExecuteTransactionEventFilter;
    ExecuteTransaction(
      owner?: PromiseOrValue<string> | null,
      txIndex?: PromiseOrValue<BigNumberish> | null
    ): ExecuteTransactionEventFilter;

    "NewInternalTransaction(address,uint256,address[],uint256)"(
      owner?: PromiseOrValue<string> | null,
      txIndex?: PromiseOrValue<BigNumberish> | null,
      owners?: null,
      threshold?: null
    ): NewInternalTransactionEventFilter;
    NewInternalTransaction(
      owner?: PromiseOrValue<string> | null,
      txIndex?: PromiseOrValue<BigNumberish> | null,
      owners?: null,
      threshold?: null
    ): NewInternalTransactionEventFilter;

    "NewTransaction(address,uint256,address,uint256,bytes)"(
      owner?: PromiseOrValue<string> | null,
      txIndex?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): NewTransactionEventFilter;
    NewTransaction(
      owner?: PromiseOrValue<string> | null,
      txIndex?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null
    ): NewTransactionEventFilter;

    "UnApproveTransaction(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      txIndex?: PromiseOrValue<BigNumberish> | null
    ): UnApproveTransactionEventFilter;
    UnApproveTransaction(
      owner?: PromiseOrValue<string> | null,
      txIndex?: PromiseOrValue<BigNumberish> | null
    ): UnApproveTransactionEventFilter;
  };

  estimateGas: {
    addInternalTransaction(
      _owners: PromiseOrValue<string>[],
      _threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTransaction(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveInternalTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeInternalTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    getTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    internalTransactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedByOwner(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInternalApprovedByOwner(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeApproval(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeInternalApproval(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testCall(overrides?: CallOverrides): Promise<BigNumber>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addInternalTransaction(
      _owners: PromiseOrValue<string>[],
      _threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTransaction(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveInternalTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeInternalTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransaction(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    internalTransactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedByOwner(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInternalApprovedByOwner(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeApproval(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeInternalApproval(
      _txIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testCall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
